{"version":3,"sources":["component/Display.js","component/Button.js","component/ButtonPanel.js","logic/operate.js","component/App.js","logic/calculate.js","logic/isNumber.js","index.js"],"names":["Display","props","className","value","Button","orange","wide","join","trim","onClick","clickHandler","name","ButtonPanel","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","Error","App","useState","total","next","appState","setAppState","buttonName","obj","test","result","includes","parseFloat","calculate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2615602e.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Display.css\";\n\nconst Display = (props) => {\n  return (\n    <div className=\"component-display\">\n      <div>{props.value}</div>\n    </div>\n  );\n}\n\nexport default Display;","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = (props) => {\n  const handleClick = () => {\n    props.clickHandler(props.name);\n  };\n  const className = [\n    \"component-button\",\n    props.orange ? \"orange\" : \"\",\n    props.wide ? \"wide\" : \"\",\n  ]\n  return (\n    <div className={className.join(\" \").trim()}>\n      <button onClick={handleClick}>{props.name}</button>\n    </div>\n  );\n}\n\nexport default Button;","import Button from \"./Button\";\nimport React from \"react\";\n\nimport \"./ButtonPanel.css\";\n\nconst ButtonPanel = (props) => {\n  return (\n    <div className=\"component-buttonpanel\">\n      <div>\n        <Button name=\"AC\" clickHandler={props.clickHandler} />\n        <Button name=\"+/-\" clickHandler={props.clickHandler} />\n        <Button name=\"%\" clickHandler={props.clickHandler} />\n        <Button name=\"รท\" clickHandler={props.clickHandler} orange />\n      </div>\n      <div>\n        <Button name=\"7\" clickHandler={props.clickHandler} />\n        <Button name=\"8\" clickHandler={props.clickHandler} />\n        <Button name=\"9\" clickHandler={props.clickHandler} />\n        <Button name=\"x\" clickHandler={props.clickHandler} orange />\n      </div>\n      <div>\n        <Button name=\"4\" clickHandler={props.clickHandler} />\n        <Button name=\"5\" clickHandler={props.clickHandler} />\n        <Button name=\"6\" clickHandler={props.clickHandler} />\n        <Button name=\"-\" clickHandler={props.clickHandler} orange />\n      </div>\n      <div>\n        <Button name=\"1\" clickHandler={props.clickHandler} />\n        <Button name=\"2\" clickHandler={props.clickHandler} />\n        <Button name=\"3\" clickHandler={props.clickHandler} />\n        <Button name=\"+\" clickHandler={props.clickHandler} orange />\n      </div>\n      <div>\n        <Button name=\"0\" clickHandler={props.clickHandler} wide />\n        <Button name=\".\" clickHandler={props.clickHandler} />\n        <Button name=\"=\" clickHandler={props.clickHandler} orange />\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonPanel;","import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"รท\") {\n    if (two === \"0\") {\n      alert(\"Divide by 0 error\");\n      return \"0\";\n    } else {\n      return one.div(two).toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from \"react\";\nimport Display from \"./Display\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport calculate from \"../logic/calculate\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [appState, setAppState] = useState({\n    total: null,\n    next: null,\n    operation: null,\n  });\n\n  /**\n   * Unlike the setState method found in class components, useState does not\n   * automatically merge update objects. You can replicate this behavior by\n   * combining the function updater form with object spread syntax.\n   */\n  const handleClick = (buttonName) => {\n    setAppState(() => {\n      return { ...appState, ...calculate(appState, buttonName) };\n    })\n  }\n\n  return (\n    <div className=\"component-app\">\n      <Display value={appState.next || appState.total || \"0\"} />\n      <ButtonPanel clickHandler={handleClick} />\n    </div>\n  );\n}\n\nexport default App;","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","export default function isNumber(item) {\n  return /[0-9]+/.test(item);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./component/App\";\nimport \"./index.css\";\nimport \"github-fork-ribbon-css/gh-fork-ribbon.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}